file is new rl_open_file:
     typedef struct {
         int nb_locks;
         rl_lock lock_table[NB_LOCKS];
     } rl_open_file;

remove_locks_of(pid, file):
    Vérifier que file et pid sont valides
    Pour i de 0 à file->nb_locks:
        rl_lock *cur = &file->lock_table[i]
        Pour j de 0 à cur->nb_owners:
            Si cur->lock_owners[j].pid = pid:
                Supprimer cur->lock_owners[j]

(1) Supprimer les verrous de tous les processus morts

while (pid == exists_dead_process()):
    remove_locks_of(pid)

remove_locks_of(pid): fonction qui supprime les verrous associés à pid
   -> refactor rl_close

exists_dead_process(): retourne le pid d'un processus mort qui a des locks

Algo 2 var 1:
Prendre le verrou sur tout le open_file
Supprimer les verrous de tous les processus morts (1)
Si le verrou est applicable:
   Poser le verrou et faire les modifs que cela implique
Relacher le verrou

Algo 2 var 2:
Prendre le verrou sur tout le open_file
Tant que le verrou n'est pas applicable à cause d'un processus mort:
    Retirer les verrous du processus mort
Si le verrou est applicable:
    Poser le verrou
Relacher le verrou

Algo 1:
Convertir flock en rl_lock
Bloquer rl_open_file
Si le placement est possible:
    Placer rl_lock en maitenant lock_table triée
Débloquer rl_open_file
